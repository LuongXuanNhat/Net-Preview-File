@using PreviewFile.Client.Dtos
@using PreviewFile.Client.Pages.File
@using Microsoft.JSInterop

<div class="preview-container mx-auto">
    @if (File != null)
    {
        @if (ShowInfo)
        {
            <div class="file-details">
                <h4>File Details</h4>
                <p>Name: @File.Name</p>
                <p>Size: @(File.Size / 1024) KB</p>
                <p>Type: @File.ContentType</p>
            </div>
        }

        @switch (GetFileType())
        {
            case FileType.Image:
                <img src="@imageDataUrl" alt="Preview" class="img-fluid preview-image" style="max-width: 90vw; max-height: 90vh;"/>
                break;
            case FileType.Video:
                <video controls class="preview-video">
                    <source src="@videoDataUrl" type="@File.ContentType" />
                    Your browser does not support the video tag.
                </video>
                break;
            case FileType.Pdf:
                <Pdf File="@File" />
                break;
            default:
                <p class="text-warning">Unsupported file type</p>
                break;
        }
    }
</div>

@code {
    [Parameter]
    public IBrowserFile File { get; set; }
    [Parameter]
    public Boolean ShowInfo { get; set; }

    private string imageDataUrl;
    private string videoDataUrl;
    private string pdfDataUrl;


    private FileType GetFileType()
    {
        if (File == null) return FileType.Unsupported;

        string contentType = File.ContentType.ToLower();

        if (contentType.StartsWith("image/"))
            return FileType.Image;
        else if (contentType.StartsWith("video/"))
            return FileType.Video;
        else if (contentType == "application/pdf")
            return FileType.Pdf;

        return FileType.Unsupported;
    }

    private async Task LoadImageAsync()
    {
        var buffer = new byte[File.Size];
        await File.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).ReadAsync(buffer);
        imageDataUrl = $"data:{File.ContentType};base64,{Convert.ToBase64String(buffer)}";
    }

    private async Task LoadVideoAsync()
    {
        var buffer = new byte[File.Size];
        await File.OpenReadStream(maxAllowedSize: 50 * 1024 * 1024).ReadAsync(buffer);
        videoDataUrl = $"data:{File.ContentType};base64,{Convert.ToBase64String(buffer)}";
    }

}